(set-logic CHC_LIA)

(synth-fun state ((x_0 Bool) (x_1 Bool) (x_2 Bool) (x_3 Bool) (x_4 Int) (x_5 Int)) Bool)

(constraint (forall ((.s.1 Bool) (.s.0 Bool) (.s.2 Bool) (.s.3 Bool) (main.x Int) (main.y Int)) (=> (and (not .s.1) .s.0 (not .s.2) (not .s.3)) (state .s.1 .s.0 .s.2 .s.3 main.x main.y))))
(constraint (forall ((.s.1 Bool) (.s.0 Bool) (.s.2 Bool) (.s.3 Bool) (main.x Int) (main.y Int) (.s.1.next Bool) (.s.0.next Bool) (.s.2.next Bool) (.s.3.next Bool) (main.x.next Int) (main.y.next Int)) (let ((a!1 (and (and (and (not .s.1) .s.0) (not .s.2)) .s.3)) (a!2 (and (and (not .s.1.next) .s.0.next) (not .s.2.next) .s.3.next (= main.x main.x.next) (= main.y main.y.next))) (a!3 (and .s.3 (and (not .s.2) (and (not .s.1) (not .s.0))))) (a!4 (and (= main.y main.y.next) (= main.x main.x.next) (not .s.3.next) (and (not .s.2.next) (and (not .s.1.next) (not .s.0.next))))) (a!5 (and (= main.y main.y.next) (= main.x main.x.next) .s.3.next (and (not .s.2.next) (and (not .s.1.next) (not .s.0.next))))) (a!7 (and (and (not .s.3) .s.2 (and .s.1 (not .s.0))) (not (<= 0 main.y)))) (a!8 (and (and (not .s.3) .s.2 (and .s.1 (not .s.0))) (<= 0 main.y))) (a!9 (not (and (not .s.3) (and (not .s.1) .s.0) .s.2))) (a!10 (and (= main.y main.y.next) (= main.x main.x.next) (and (not .s.3.next) (not .s.2.next) (and .s.1.next (not .s.0.next))))) (a!11 (not (and (not .s.3) .s.2 (and (not .s.1) (not .s.0))))) (a!12 (= (+ main.y (* (- 1) main.y.next)) (- 1))) (a!14 (= (+ main.x (* (- 1) main.x.next) main.y) 0)) (a!16 (and (and (not .s.3) (not .s.2) (and .s.1 (not .s.0))) (<= 0 main.x))) (a!18 (and (and (not .s.3) (not .s.2) (and .s.1 (not .s.0))) (not (<= 0 main.x)))) (a!19 (and (and (and (not .s.1) .s.0) (not .s.2)) (not .s.3))) (a!20 (and (= main.y main.y.next) (and (not .s.3.next) (not .s.2.next) (and .s.1.next (not .s.0.next))) (= main.x.next (- 50)))) (a!21 (and (not .s.3) (and (not .s.2) (and (not .s.1) (not .s.0)))))) (let ((a!6 (or (not (and (not .s.3) .s.2 (and .s.1 .s.0))) a!5)) (a!13 (or a!11 (and (= main.x main.x.next) a!12 (not .s.3.next) (and (not .s.1.next) .s.0.next) .s.2.next))) (a!15 (or (not (and (not .s.3) (not .s.2) (and .s.1 .s.0))) (and (= main.y main.y.next) a!14 (not .s.3.next) .s.2.next (and (not .s.1.next) (not .s.0.next))))) (a!17 (or (not a!16) (and (= main.y main.y.next) (= main.x main.x.next) (not .s.3.next) .s.2.next (and .s.1.next (not .s.0.next)))))) (let ((a!22 (and (state .s.1 .s.0 .s.2 .s.3 main.x main.y) (or (not a!1) a!2) (or (not a!3) a!4) a!6 (or a!2 (not a!7)) (or (not a!8) (and (= main.y main.y.next) (= main.x main.x.next) (not .s.3.next) .s.2.next (and .s.1.next .s.0.next))) (or a!9 a!10) a!13 a!15 a!17 (or (not a!18) (and (= main.y main.y.next) (= main.x main.x.next) (not .s.3.next) (not .s.2.next) (and .s.1.next .s.0.next))) (or (not a!19) a!20) (or a!4 (not a!21))))) (=> a!22 (state .s.1.next .s.0.next .s.2.next .s.3.next main.x.next main.y.next)))))))
(constraint (forall ((.s.1 Bool) (.s.0 Bool) (.s.2 Bool) (.s.3 Bool) (main.x Int) (main.y Int)) (let ((a!1 (not (not (and (not .s.1) .s.0 (not .s.2) .s.3))))) (=> (and (state .s.1 .s.0 .s.2 .s.3 main.x main.y) a!1) false))))

(check-synth)

