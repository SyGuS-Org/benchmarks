(set-logic CHC_LIA)

(synth-fun state ((x_0 Bool) (x_1 Bool) (x_2 Bool) (x_3 Bool) (x_4 Int) (x_5 Int) (x_6 Int) (x_7 Int)) Bool)

(constraint (forall ((.s.1 Bool) (.s.0 Bool) (.s.2 Bool) (.s.3 Bool) (main.n Int) (main.k Int) (main.j Int) (main.i Int)) (=> (and (not .s.1) .s.0 (not .s.2) (not .s.3)) (state .s.1 .s.0 .s.2 .s.3 main.n main.k main.j main.i))))
(constraint (forall ((.s.1 Bool) (.s.0 Bool) (.s.2 Bool) (.s.3 Bool) (main.n Int) (main.k Int) (main.j Int) (main.i Int) (main.n.next Int) (main.k.next Int) (main.j.next Int) (main.i.next Int) (.s.3.next Bool) (.s.2.next Bool) (.s.1.next Bool) (.s.0.next Bool)) (let ((a!1 (and .s.3 (and .s.2 (and .s.1 (not .s.0))))) (a!2 (and (= main.n main.n.next) (= main.k main.k.next) (= main.j main.j.next) (= main.i main.i.next) (not .s.3.next) (and (not .s.2.next) (and (not .s.1.next) (not .s.0.next))))) (a!3 (and .s.3 (and (and (not .s.1) .s.0) .s.2))) (a!4 (and (= main.n main.n.next) (= main.k main.k.next) (= main.j main.j.next) (= main.i main.i.next) .s.3.next (and .s.2.next (and (not .s.1.next) .s.0.next)))) (a!5 (and .s.3 (and .s.2 (and (not .s.1) (not .s.0))))) (a!7 (not (and .s.3 (and (not .s.2) (and .s.1 .s.0))))) (a!8 (= (+ main.k (* (- 1) main.k.next)) 1)) (a!10 (and .s.3 (and (not .s.2) (and .s.1 (not .s.0))))) (a!11 (= (+ main.j (* (- 1) main.j.next)) 1)) (a!13 (and (and (and (not .s.1) .s.0) (not .s.2)) .s.3)) (a!14 (and (= main.n main.n.next) (= main.k main.k.next) (= main.j main.j.next) (= main.i main.i.next) .s.3.next (and (not .s.2.next) (and .s.1.next (not .s.0.next))))) (a!15 (and .s.3 (and (not .s.2) (and (not .s.1) (not .s.0))))) (a!19 (not (and (and (not .s.3) .s.2 (and .s.1 .s.0)) (not (<= main.j 0))))) (a!20 (and (= main.n main.n.next) (= main.k main.k.next) (= main.j main.j.next) (= main.i main.i.next) .s.3.next (and (not .s.2.next) (and (not .s.1.next) (not .s.0.next))))) (a!21 (not (and (and (not .s.3) .s.2 (and .s.1 .s.0)) (<= main.j 0)))) (a!22 (and (= main.n main.n.next) (= main.k main.k.next) (= main.j main.j.next) (= main.i main.i.next) .s.3.next (and .s.2.next (and .s.1.next (not .s.0.next))))) (a!23 (and (not .s.3) (and .s.2 (and .s.1 (not .s.0))))) (a!25 (and (not .s.3) (and (and (not .s.1) .s.0) .s.2))) (a!26 (and (not .s.3.next) (and (not .s.2.next) (and .s.1.next (not .s.0.next))))) (a!27 (and (not .s.3) (and .s.2 (and (not .s.1) (not .s.0))))) (a!28 (= (+ main.k (* (- 1) main.k.next)) (- 1))) (a!30 (not (and (not .s.3) (and (not .s.2) (and .s.1 .s.0))))) (a!31 (= (+ main.i (* (- 1) main.i.next)) (- 1))) (a!33 (and (not .s.3) (and (not .s.2) (and .s.1 (not .s.0))))) (a!34 (and (= main.n main.n.next) (= main.k main.k.next) (= main.j main.j.next) (= main.i main.i.next) (not .s.3.next) (and .s.2.next (and .s.1.next (not .s.0.next))))) (a!38 (and (and (and (not .s.1) .s.0) (not .s.2)) (not .s.3))) (a!39 (and (not .s.3) (and (not .s.2) (and (not .s.1) (not .s.0)))))) (let ((a!6 (or (not a!5) (and (= main.n main.n.next) (= main.k main.k.next) (= main.j main.j.next) (= main.i main.i.next) (and (not .s.3.next) .s.2.next (and .s.1.next .s.0.next))))) (a!9 (and (= main.n main.n.next) (= main.j main.j.next) (= main.i main.i.next) a!8 .s.3.next (and .s.2.next (and (not .s.1.next) (not .s.0.next))))) (a!12 (or (not a!10) (and (= main.n main.n.next) (= main.k main.k.next) (= main.i main.i.next) a!11 .s.3.next (and (not .s.2.next) (and .s.1.next .s.0.next))))) (a!16 (not (and a!15 (not (<= main.k 0))))) (a!18 (or a!4 (not (and a!15 (<= main.k 0))))) (a!24 (or (not a!23) (and (= main.n main.n.next) (= main.k main.k.next) (= main.i main.i.next) (and (not .s.3.next) .s.2.next (and .s.1.next .s.0.next)) (= main.n main.j.next)))) (a!29 (and (= main.n main.n.next) (= main.j main.j.next) (= main.i main.i.next) a!28 (not .s.3.next) (and .s.2.next (and (not .s.1.next) .s.0.next)))) (a!32 (and (= main.n main.n.next) (= main.k main.k.next) (= main.j main.j.next) a!31 (not .s.3.next) (and .s.2.next (and (not .s.1.next) (not .s.0.next))))) (a!35 (or (not (and a!33 (<= main.n main.i))) a!34)) (a!36 (not (and a!33 (not (<= main.n main.i)))))) (let ((a!17 (or a!16 (and (= main.n main.n.next) (= main.k main.k.next) (= main.j main.j.next) (= main.i main.i.next) .s.3.next (not .s.2.next) (and (not .s.1.next) .s.0.next)))) (a!37 (or a!36 (and (= main.n main.n.next) (= main.k main.k.next) (= main.j main.j.next) (= main.i main.i.next) (not .s.3.next) (and (not .s.2.next) (and .s.1.next .s.0.next)))))) (let ((a!40 (and (state .s.1 .s.0 .s.2 .s.3 main.n main.k main.j main.i) (or (not a!1) a!2) (or (not a!3) a!4) a!6 (or a!7 a!9) a!12 (or (not a!13) a!14) a!17 a!18 (or a!19 a!20) (or a!21 a!22) a!24 (or (not a!25) (and (= main.n main.n.next) (= main.k main.k.next) (= main.j main.j.next) (= main.i main.i.next) a!26)) (or (not a!27) a!29) (or a!30 a!32) a!35 a!37 (or (not a!38) (and (= main.n main.n.next) (= main.j main.j.next) (= main.i.next 0) a!26 (= main.k.next 0))) (or a!2 (not a!39))))) (=> a!40 (state .s.1.next .s.0.next .s.2.next .s.3.next main.n.next main.k.next main.j.next main.i.next))))))))
(constraint (forall ((.s.1 Bool) (.s.0 Bool) (.s.2 Bool) (.s.3 Bool) (main.n Int) (main.k Int) (main.j Int) (main.i Int)) (let ((a!1 (not (not (and .s.3 (not .s.1) .s.0 .s.2))))) (=> (and (state .s.1 .s.0 .s.2 .s.3 main.n main.k main.j main.i) a!1) false))))

(check-synth)

