(set-logic CHC_LIA)

(synth-fun starexecinv1 ((x_0 Int) (x_1 Int) (x_2 Int) (x_3 Int) (x_4 Int) (x_5 Int)) Bool)

(constraint (forall ((cleaned_symbol_0 Int) (cleaned_symbol_1 Int) (cleaned_symbol_2 Int) (cleaned_symbol_3 Int) (cleaned_symbol_4 Int) (cleaned_symbol_5 Int)) (let ((a!1 (> cleaned_symbol_4 (* (+ 0 (- 1)) cleaned_symbol_0))) (a!2 (> cleaned_symbol_4 (* (+ 0 (- 1)) cleaned_symbol_1))) (a!3 (> cleaned_symbol_4 (* (+ 0 (- 1)) cleaned_symbol_2))) (a!4 (> cleaned_symbol_4 (* (+ 0 (- 1)) cleaned_symbol_3))) (a!5 (> cleaned_symbol_5 (* (+ 0 (- 1)) cleaned_symbol_0))) (a!6 (> cleaned_symbol_5 (* (+ 0 (- 1)) cleaned_symbol_1))) (a!7 (> cleaned_symbol_5 (* (+ 0 (- 1)) cleaned_symbol_2))) (a!8 (> cleaned_symbol_5 (* (+ 0 (- 1)) cleaned_symbol_3)))) (=> (and true (= (+ 0 1) cleaned_symbol_0) (= (+ 0 1) cleaned_symbol_1) (> cleaned_symbol_2 (+ 0 1)) (> cleaned_symbol_3 (+ 0 1)) (< cleaned_symbol_2 cleaned_symbol_3) (> cleaned_symbol_4 cleaned_symbol_0) (> cleaned_symbol_4 cleaned_symbol_1) (> cleaned_symbol_4 cleaned_symbol_2) (> cleaned_symbol_4 cleaned_symbol_3) a!1 a!2 a!3 a!4 (> cleaned_symbol_5 cleaned_symbol_0) (> cleaned_symbol_5 cleaned_symbol_1) (> cleaned_symbol_5 cleaned_symbol_2) (> cleaned_symbol_5 cleaned_symbol_3) a!5 a!6 a!7 a!8) (starexecinv1 cleaned_symbol_0 cleaned_symbol_1 cleaned_symbol_2 cleaned_symbol_3 cleaned_symbol_4 cleaned_symbol_5)))))
(constraint (forall ((cleaned_symbol_6 Int) (cleaned_symbol_7 Int) (cleaned_symbol_8 Int) (cleaned_symbol_9 Int) (gh0 Int) (gh1 Int) (cleaned_symbol_0 Int) (cleaned_symbol_1 Int) (cleaned_symbol_2 Int) (cleaned_symbol_3 Int) (cleaned_symbol_5 Int) (cleaned_symbol_4 Int)) (let ((a!1 (and (= cleaned_symbol_5 (- gh1 (+ 0 1))) (> gh1 (+ 0 0)) (= cleaned_symbol_4 gh0))) (a!2 (> cleaned_symbol_5 (* (+ 0 (- 1)) cleaned_symbol_0))) (a!3 (> cleaned_symbol_5 (* (+ 0 (- 1)) cleaned_symbol_1))) (a!4 (> cleaned_symbol_5 (* (+ 0 (- 1)) cleaned_symbol_2))) (a!5 (> cleaned_symbol_5 (* (+ 0 (- 1)) cleaned_symbol_3))) (a!7 (+ (* (+ 0 (- 1)) cleaned_symbol_8) (* (+ 0 1) cleaned_symbol_9)))) (let ((a!6 (and (= cleaned_symbol_4 (- gh0 (+ 0 1))) (> cleaned_symbol_5 cleaned_symbol_0) (> cleaned_symbol_5 cleaned_symbol_1) (> cleaned_symbol_5 cleaned_symbol_2) (> cleaned_symbol_5 cleaned_symbol_3) a!2 a!3 a!4 a!5 (<= gh1 (+ 0 0))))) (let ((a!8 (and (starexecinv1 cleaned_symbol_6 cleaned_symbol_7 cleaned_symbol_8 cleaned_symbol_9 gh0 gh1) (>= cleaned_symbol_6 cleaned_symbol_7) (= cleaned_symbol_0 (* cleaned_symbol_6 cleaned_symbol_8)) (= cleaned_symbol_1 (* cleaned_symbol_7 cleaned_symbol_9)) (= cleaned_symbol_2 cleaned_symbol_8) (= cleaned_symbol_3 cleaned_symbol_9) (or a!1 a!6) (>= (* (+ 0 1) cleaned_symbol_7) (+ 0 1)) (>= (* (+ 0 1) cleaned_symbol_6) (+ 0 1)) (> (* (+ 0 1) cleaned_symbol_8) (+ 0 1)) (> (* (+ 0 1) cleaned_symbol_9) (+ 0 1)) (> a!7 (+ 0 0))))) (=> a!8 (starexecinv1 cleaned_symbol_0 cleaned_symbol_1 cleaned_symbol_2 cleaned_symbol_3 cleaned_symbol_4 cleaned_symbol_5)))))))
(constraint (forall ((cleaned_symbol_6 Int) (cleaned_symbol_7 Int) (cleaned_symbol_8 Int) (cleaned_symbol_9 Int) (gh0 Int) (gh1 Int)) (let ((a!1 (+ (* (+ 0 (- 1)) cleaned_symbol_8) (* (+ 0 1) cleaned_symbol_9)))) (let ((a!2 (and (starexecinv1 cleaned_symbol_6 cleaned_symbol_7 cleaned_symbol_8 cleaned_symbol_9 gh0 gh1) (>= cleaned_symbol_6 cleaned_symbol_7) (< gh0 (+ 0 0)) (>= (* (+ 0 1) cleaned_symbol_7) (+ 0 1)) (>= (* (+ 0 1) cleaned_symbol_6) (+ 0 1)) (> (* (+ 0 1) cleaned_symbol_8) (+ 0 1)) (> (* (+ 0 1) cleaned_symbol_9) (+ 0 1)) (> a!1 (+ 0 0))))) (=> a!2 false)))))

(check-synth)

