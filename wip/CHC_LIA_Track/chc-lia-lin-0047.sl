(set-logic CHC_LIA)

(synth-fun state ((x_0 Bool) (x_1 Bool) (x_2 Bool) (x_3 Bool) (x_4 Int) (x_5 Int) (x_6 Int)) Bool)

(constraint (forall ((.s.1 Bool) (.s.0 Bool) (.s.2 Bool) (.s.3 Bool) (main.i Int) (main.m Int) (main.n Int)) (=> (and (not .s.1) .s.0 (not .s.2) (not .s.3)) (state .s.1 .s.0 .s.2 .s.3 main.i main.m main.n))))
(constraint (forall ((.s.1 Bool) (.s.0 Bool) (.s.2 Bool) (.s.3 Bool) (main.i Int) (main.m Int) (main.n Int) (.s.0.next Bool) (.s.1.next Bool) (.s.2.next Bool) (.s.3.next Bool) (main.i.next Int) (main.m.next Int) (main.n.next Int)) (let ((a!1 (not (and .s.3 (and (not .s.2) (and .s.1 .s.0))))) (a!2 (and (and (and .s.0.next .s.1.next) (not .s.2.next)) .s.3.next (= main.i main.i.next) (= main.m main.m.next) (= main.n main.n.next))) (a!3 (and .s.3 (and (not .s.2) (and .s.1 (not .s.0))))) (a!4 (and (= main.n main.n.next) (= main.m main.m.next) (= main.i main.i.next) (not .s.3.next) (and (not .s.2.next) (and (not .s.1.next) (not .s.0.next))))) (a!5 (and (and (and (not .s.1) .s.0) (not .s.2)) .s.3)) (a!6 (and (= main.n main.n.next) (= main.m main.m.next) (= main.i main.i.next) .s.3.next (and (not .s.2.next) (and .s.1.next (not .s.0.next))))) (a!7 (and .s.3 (and (not .s.2) (and (not .s.1) (not .s.0))))) (a!11 (and (= main.n main.n.next) (= main.m main.m.next) (= main.i main.i.next) (and (not .s.3.next) .s.2.next (and .s.0.next (not .s.1.next))))) (a!13 (not (and (not .s.3) .s.2 (and .s.1 (not .s.0))))) (a!14 (= (+ (* 3 main.i) (* (- 1) main.i.next)) 0)) (a!15 (not (and (not .s.3) (and (not .s.1) .s.0) .s.2))) (a!16 (and (not .s.3.next) (and (not .s.2.next) (and .s.1.next (not .s.0.next))))) (a!17 (not (and (not .s.3) .s.2 (and (not .s.1) (not .s.0))))) (a!18 (= (+ (* 2 main.i) (* (- 1) main.i.next)) 0)) (a!20 (and (and (not .s.3) (and (not .s.2) (and .s.1 .s.0))) (not (<= main.m 0)))) (a!22 (and (and (not .s.3) (and (not .s.2) (and .s.1 .s.0))) (<= main.m 0))) (a!24 (and (not .s.3) (and (not .s.2) (and .s.1 (not .s.0))))) (a!27 (and (= main.n main.n.next) (= main.m main.m.next) (= main.i main.i.next) .s.3.next (and (not .s.2.next) (and (not .s.1.next) (not .s.0.next))))) (a!29 (and (and (and (not .s.1) .s.0) (not .s.2)) (not .s.3))) (a!30 (and (not .s.3) (and (not .s.2) (and (not .s.1) (not .s.0)))))) (let ((a!8 (not (and a!7 (not (<= main.i 0))))) (a!10 (or a!2 (not (and a!7 (<= main.i 0))))) (a!12 (or (not (and (not .s.3) .s.2 (and .s.1 .s.0))) a!11)) (a!19 (and (= main.n main.n.next) (= main.m main.m.next) (and (not .s.3.next) .s.2.next (and .s.0.next (not .s.1.next))) a!18)) (a!21 (or (not a!20) (and (= main.n main.n.next) (= main.m main.m.next) (= main.i main.i.next) (not .s.3.next) .s.2.next (and (not .s.1.next) (not .s.0.next))))) (a!23 (or (not a!22) (and (= main.n main.n.next) (= main.m main.m.next) (= main.i main.i.next) (not .s.3.next) .s.2.next (and .s.1.next (not .s.0.next))))) (a!25 (not (and a!24 (not (<= main.n main.i))))) (a!28 (or (not (and a!24 (<= main.n main.i))) a!27))) (let ((a!9 (or a!8 (and (= main.n main.n.next) (= main.m main.m.next) (= main.i main.i.next) .s.3.next (not .s.2.next) (and .s.0.next (not .s.1.next))))) (a!26 (or a!25 (and (= main.n main.n.next) (= main.m main.m.next) (= main.i main.i.next) (and (and .s.0.next .s.1.next) (not .s.2.next)) (not .s.3.next))))) (let ((a!31 (and (state .s.1 .s.0 .s.2 .s.3 main.i main.m main.n) (or a!1 a!2) (or (not a!3) a!4) (or (not a!5) a!6) a!9 a!10 a!12 (or a!13 (and (= main.n main.n.next) (= main.m main.m.next) a!14 (not .s.3.next) (and .s.0.next .s.1.next) .s.2.next)) (or a!15 (and (= main.n main.n.next) (= main.m main.m.next) (= main.i main.i.next) a!16)) (or a!17 a!19) a!21 a!23 a!26 a!28 (or (not a!29) (and (= main.n main.n.next) (= main.m main.m.next) a!16 (= main.i.next 1))) (or a!4 (not a!30))))) (=> a!31 (state .s.1.next .s.0.next .s.2.next .s.3.next main.i.next main.m.next main.n.next))))))))
(constraint (forall ((.s.1 Bool) (.s.0 Bool) (.s.2 Bool) (.s.3 Bool) (main.i Int) (main.m Int) (main.n Int)) (let ((a!1 (not (not (and .s.3 (not .s.2) .s.1 .s.0))))) (=> (and (state .s.1 .s.0 .s.2 .s.3 main.i main.m main.n) a!1) false))))

(check-synth)

