(set-logic CHC_LIA)

(synth-fun state ((x_0 Bool) (x_1 Bool) (x_2 Bool) (x_3 Bool) (x_4 Int) (x_5 Int) (x_6 Int) (x_7 Int)) Bool)

(constraint (forall ((.s.1 Bool) (.s.0 Bool) (.s.2 Bool) (.s.3 Bool) (main.i Int) (main.j Int) (main.x Int) (main.y Int)) (=> (and (not .s.1) .s.0 (not .s.2) (not .s.3)) (state .s.1 .s.0 .s.2 .s.3 main.i main.j main.x main.y))))
(constraint (forall ((.s.1 Bool) (.s.0 Bool) (.s.2 Bool) (.s.3 Bool) (main.i Int) (main.j Int) (main.x Int) (main.y Int) (.s.1.next Bool) (.s.0.next Bool) (.s.2.next Bool) (.s.3.next Bool) (main.i.next Int) (main.j.next Int) (main.x.next Int) (main.y.next Int)) (let ((a!1 (and .s.3 (and .s.2 (and (not .s.1) (not .s.0))))) (a!2 (and (and (and (not .s.1.next) (not .s.0.next)) .s.2.next) .s.3.next (= main.i main.i.next) (= main.j main.j.next) (= main.x main.x.next) (= main.y main.y.next))) (a!3 (not (and .s.3 (and (not .s.2) (and .s.1 .s.0))))) (a!4 (and (= main.y main.y.next) (= main.x main.x.next) (= main.j main.j.next) (= main.i main.i.next) (not .s.3.next) (and (and (not .s.1.next) (not .s.0.next)) (not .s.2.next)))) (a!5 (and .s.3 (and (not .s.2) (and .s.1 (not .s.0))))) (a!6 (and (= main.y main.y.next) (= main.x main.x.next) (= main.j main.j.next) (= main.i main.i.next) .s.3.next (and (not .s.2.next) (and .s.1.next .s.0.next)))) (a!7 (and (and (and (not .s.1) .s.0) (not .s.2)) .s.3)) (a!8 (and (= main.y main.y.next) (= main.x main.x.next) (= main.j main.j.next) (= main.i main.i.next) .s.3.next (and (not .s.2.next) (and .s.1.next (not .s.0.next))))) (a!9 (and .s.3 (and (not .s.2) (and (not .s.1) (not .s.0))))) (a!12 (not (and (and (not .s.3) .s.2 (and .s.1 .s.0)) (not (= main.i main.j))))) (a!13 (not (and (and (not .s.3) .s.2 (and .s.1 .s.0)) (= main.i main.j)))) (a!14 (and (= main.y main.y.next) (= main.x main.x.next) (= main.j main.j.next) (= main.i main.i.next) .s.3.next (and (and (not .s.1.next) (not .s.0.next)) (not .s.2.next)))) (a!15 (not (and (not .s.3) .s.2 (and .s.1 (not .s.0))))) (a!16 (and (= main.y main.y.next) (= main.x main.x.next) (= main.j main.j.next) (= main.i main.i.next) (and (not .s.3.next) (and (not .s.2.next) (and .s.1.next .s.0.next))))) (a!17 (not (and (not .s.3) (and (not .s.1) .s.0) .s.2))) (a!18 (= (+ main.y (* (- 1) main.y.next)) 1)) (a!20 (and (not .s.3) (and .s.2 (and (not .s.1) (not .s.0))))) (a!21 (= (+ main.x (* (- 1) main.x.next)) 1)) (a!23 (and (and (not .s.3) (and (not .s.2) (and .s.1 .s.0))) (not (= main.x 0)))) (a!24 (and (= main.y main.y.next) (= main.x main.x.next) (= main.j main.j.next) (= main.i main.i.next) (and (and (not .s.1.next) (not .s.0.next)) .s.2.next) (not .s.3.next))) (a!25 (and (and (not .s.3) (and (not .s.2) (and .s.1 .s.0))) (= main.x 0))) (a!26 (and (not .s.3) (and (not .s.2) (and .s.1 (not .s.0))))) (a!27 (and (= main.x main.x.next) (= main.j main.j.next) (= main.i main.i.next) (and (not .s.3.next) (and (not .s.2.next) (and .s.1.next .s.0.next))) (= main.j main.y.next))) (a!28 (and (and (and (not .s.1) .s.0) (not .s.2)) (not .s.3))) (a!29 (and (= main.y main.y.next) (= main.j main.j.next) (= main.i main.i.next) (= main.i main.x.next) (not .s.3.next) (and (not .s.2.next) (and .s.1.next (not .s.0.next))))) (a!30 (and (not .s.3) (and (not .s.2) (and (not .s.1) (not .s.0)))))) (let ((a!10 (or (not (and a!9 (= main.y 0))) (and (= main.y main.y.next) (= main.x main.x.next) (= main.j main.j.next) (= main.i main.i.next) .s.3.next (not .s.2.next) (and (not .s.1.next) .s.0.next)))) (a!11 (not (and a!9 (not (= main.y 0))))) (a!19 (or a!17 (and (= main.x main.x.next) (= main.j main.j.next) (= main.i main.i.next) a!18 (not .s.3.next) .s.2.next (and .s.1.next (not .s.0.next))))) (a!22 (or (not a!20) (and (= main.y main.y.next) (= main.j main.j.next) (= main.i main.i.next) a!21 (not .s.3.next) .s.2.next (and (not .s.1.next) .s.0.next))))) (let ((a!31 (and (state .s.1 .s.0 .s.2 .s.3 main.i main.j main.x main.y) (or (not a!1) a!2) (or a!3 a!4) (or (not a!5) a!6) (or (not a!7) a!8) a!10 (or a!2 a!11) (or a!6 a!12) (or a!13 a!14) (or a!15 a!16) a!19 a!22 (or (not a!23) a!24) (or (not a!25) (and (= main.y main.y.next) (= main.x main.x.next) (= main.j main.j.next) (= main.i main.i.next) (not .s.3.next) .s.2.next (and .s.1.next .s.0.next))) (or (not a!26) a!27) (or (not a!28) a!29) (or a!4 (not a!30))))) (=> a!31 (state .s.1.next .s.0.next .s.2.next .s.3.next main.i.next main.j.next main.x.next main.y.next)))))))
(constraint (forall ((.s.1 Bool) (.s.0 Bool) (.s.2 Bool) (.s.3 Bool) (main.i Int) (main.j Int) (main.x Int) (main.y Int)) (let ((a!1 (not (not (and .s.3 .s.2 (not .s.1) (not .s.0)))))) (=> (and (state .s.1 .s.0 .s.2 .s.3 main.i main.j main.x main.y) a!1) false))))

(check-synth)

